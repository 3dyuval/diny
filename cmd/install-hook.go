package cmd

import (
	"fmt"
	"os"
	"path/filepath"

	"github.com/spf13/cobra"
)

var installHookCmd = &cobra.Command{
	Use:   "install-hook",
	Short: "Install git hook to populate commit messages with diny",
	Long: `Install a prepare-commit-msg git hook that automatically populates
commit messages with diny-generated content when creating commits.

This hook will:
- Generate a commit message using diny
- Write it to .git/COMMIT_EDITMSG as a draft
- Allow you to edit the message in your editor

The hook only runs for regular commits, not for merges, rebases, or squashes.`,
	Run: func(cmd *cobra.Command, args []string) {
		if err := installGitHook(); err != nil {
			fmt.Fprintf(os.Stderr, "Error installing git hook: %v\n", err)
			os.Exit(1)
		}
		fmt.Println("âœ… Git hook installed successfully!")
		fmt.Println("Now when you run 'git commit', diny will pre-populate your commit message.")
	},
}

func installGitHook() error {
	// Check if we're in a git repository
	if _, err := os.Stat(".git"); os.IsNotExist(err) {
		return fmt.Errorf("not in a git repository")
	}

	// Create hooks directory if it doesn't exist
	hooksDir := ".git/hooks"
	if err := os.MkdirAll(hooksDir, 0755); err != nil {
		return fmt.Errorf("failed to create hooks directory: %v", err)
	}

	// Get the path to the current diny binary
	dinyPath, err := os.Executable()
	if err != nil {
		return fmt.Errorf("failed to get diny executable path: %v", err)
	}

	// Create the hook script
	hookScript := fmt.Sprintf(`#!/bin/sh
# prepare-commit-msg hook generated by diny
# This hook populates commit messages with AI-generated content

COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2
SHA1=$3

# Only run for regular commits (not merges, rebases, etc.)
if [ -z "$COMMIT_SOURCE" ] || [ "$COMMIT_SOURCE" = "message" ]; then
    # Check if there are staged changes
    if ! git diff --cached --quiet; then
        # Generate commit message using diny
        if command -v %s >/dev/null 2>&1; then
            DINY_MSG=$(%s message 2>/dev/null)
            if [ $? -eq 0 ] && [ -n "$DINY_MSG" ]; then
                # If the commit message file is empty or only has comments, replace it
                if [ ! -s "$COMMIT_MSG_FILE" ] || ! grep -q '^[^#]' "$COMMIT_MSG_FILE"; then
                    echo "$DINY_MSG" > "$COMMIT_MSG_FILE"
                    echo "" >> "$COMMIT_MSG_FILE"
                    echo "# Commit message generated by diny" >> "$COMMIT_MSG_FILE"
                    echo "# Edit the message above or replace it entirely" >> "$COMMIT_MSG_FILE"
                fi
            fi
        fi
    fi
fi
`, dinyPath, dinyPath)

	// Write the hook script
	hookPath := filepath.Join(hooksDir, "prepare-commit-msg")
	if err := os.WriteFile(hookPath, []byte(hookScript), 0755); err != nil {
		return fmt.Errorf("failed to write hook script: %v", err)
	}

	return nil
}

func init() {
	rootCmd.AddCommand(installHookCmd)
}